# main.py
"""
Sistema de Gesti√≥n Hospitalaria
--------------------------------
Punto de entrada principal del sistema.
Soporta dos modos: consola y UI gr√°fica.
"""
import sys
import time
from models.buffer import Buffer
from models.paciente import Paciente
from models.consumidor import Consumidor
from models.productor import Productor

def modo_consola():
    """Ejecuta el sistema en modo consola (CLI)"""
    print("=== SISTEMA DE GESTI√ìN DE PACIENTES (MODO CONSOLA) ===")

    # Crear buffer compartido
    buffer = Buffer(capacidad=5)

    # Crear e iniciar consumidores (m√©dicos)
    consumidores = [Consumidor(id=i, buffer=buffer) for i in range(3)]
    for c in consumidores:
        c.start()

    # Crear productor (personal de admisi√≥n)
    productor = Productor(buffer)
    productor.start()

    # Bucle principal de interacci√≥n
    while True:
        print("\n1. Agregar paciente")
        print("2. Ver pacientes en espera")
        print("3. Detener sistema")
        print("========================================")
        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            try:
                nombre = input("Nombre del paciente: ")
                edad = int(input("Edad del paciente: "))
                genero = input("G√©nero (Masculino/Femenino/Otro): ")
                sintomas = input("S√≠ntomas: ")

                nuevo_paciente = Paciente(nombre, edad, genero, sintomas)
                exito = buffer.agregar_paciente(nuevo_paciente)
                if exito:
                    print(f"‚úÖ Paciente '{nombre}' agregado correctamente.")
                else:
                    print("‚ö†Ô∏è  No se pudo agregar el paciente. Buffer lleno.")
            except ValueError:
                print("‚ùå Error: La edad debe ser un n√∫mero.")

        elif opcion == "2":
            pacientes = buffer.obtener_lista_pacientes()
            if pacientes:
                print("\nüë• Pacientes en espera:")
                for p in pacientes:
                    print(f"- {p.nombre} ({p.edad} a√±os, {p.genero}) - {p.sintomas}")
            else:
                print("üì≠ No hay pacientes en espera.")

        elif opcion == "3":
            print("üõë Deteniendo el sistema...")
            productor.detener()
            for c in consumidores:
                c.detener()
            break

        else:
            print("‚ùå Opci√≥n no v√°lida. Intenta nuevamente.")

        time.sleep(0.5)

    print("Sistema detenido correctamente.")

def modo_ui():
    """Ejecuta el sistema con interfaz gr√°fica"""
    print("=== SISTEMA DE GESTI√ìN DE PACIENTES (MODO UI) ===")
    
    try:
        from ui.hospital_ui import HospitalUI
    except ImportError:
        print("‚ùå Error: No se pudo importar la UI.")
        print("Aseg√∫rate de que tkinter est√© instalado.")
        return
    
    # Crear buffer compartido
    buffer = Buffer(capacidad=5)
    
    # Crear e iniciar consumidores (m√©dicos)
    consumidores = [Consumidor(id=i, buffer=buffer) for i in range(3)]
    for c in consumidores:
        c.start()
    
    # Crear productor (personal de admisi√≥n)
    productor = Productor(buffer)
    productor.start()
    
    # Iniciar interfaz gr√°fica
    print("üöÄ Abriendo interfaz gr√°fica...")
    ui = HospitalUI(buffer, consumidores, productor)
    ui.run()
    
    print("Sistema cerrado correctamente.")

def main():
    """Punto de entrada principal"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë      üè• SMART HOSPITAL MANAGEMENT SYSTEM üè•             ‚ïë
‚ïë                                                          ‚ïë
‚ïë  Sistema de Gesti√≥n Hospitalaria con Concurrencia       ‚ïë
‚ïë  Proyecto de Sistemas Operativos - UNSA                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # Determinar modo de ejecuci√≥n
    if len(sys.argv) > 1:
        modo = sys.argv[1].lower()
        if modo == "--consola" or modo == "-c":
            modo_consola()
        elif modo == "--ui" or modo == "-u":
            modo_ui()
        elif modo == "--help" or modo == "-h":
            print("Uso: python main.py [OPCI√ìN]")
            print("\nOpciones:")
            print("  --ui, -u       Inicia con interfaz gr√°fica (por defecto)")
            print("  --consola, -c  Inicia en modo consola")
            print("  --help, -h     Muestra esta ayuda")
        else:
            print(f"‚ùå Opci√≥n desconocida: {modo}")
            print("Usa --help para ver las opciones disponibles.")
    else:
        # Por defecto, usar UI
        print("üí° Consejo: Usa 'python main.py --consola' para modo consola")
        print("Iniciando en modo UI en 2 segundos...\n")
        time.sleep(2)
        modo_ui()

if __name__ == "__main__":
    main()
